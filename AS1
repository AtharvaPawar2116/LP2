# Undirected Graph representation using a dictionary
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# BFS Function
def bfs(graph, start):
    visited = []
    queue = []
    
    visited.append(start)
    queue.append(start)
    
    print("BFS Traversal:")
    while queue:
        node = queue.pop(0)
        print(node, end=" ")
        
        for neighbour in graph[node]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
    print("\n")

# DFS Function (Recursive)
def dfs(graph, node, visited):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(graph, neighbour, visited)

# Driver Code
print("Undirected Graph Traversal:\n")

# BFS from node 'A'
bfs(graph, 'A')

# DFS from node 'A'
visited_dfs = set()
print("DFS Traversal (Recursive):")
dfs(graph, 'A', visited_dfs)
